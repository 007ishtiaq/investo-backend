exports.verifyTask = async (req, res) => {
  console.log("Verifying task");

  try {
    const { taskId } = req.params;
    const { email } = req.user; // Get email from Firebase user
    const verificationData = req.body;

    // For debugging
    console.log("Verification data received:", verificationData);

    // Find the user in the database
    const user = await User.findOne({ email });
    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "User not found" });
    }

    // Check if task exists
    const task = await Task.findById(taskId);
    if (!task) {
      return res
        .status(404)
        .json({ success: false, message: "Task not found" });
    }

    // Check if user has started this task
    let userTask = await UserTask.findOne({ userId: user._id, taskId: taskId });

    if (!userTask) {
      // If not started, create and start it now
      userTask = new UserTask({
        userId: user._id,
        taskId: taskId,
        startedAt: new Date(),
        reward: task.reward,
        completed: false,
        verified: false,
      });
    }

    // If already completed, return success
    if (userTask.completed) {
      return res.json({ success: true, message: "Task already completed" });
    }

    // Perform verification based on task type
    let isVerified = false;
    let requiresManualVerification = false;

    // Special handling for screenshot verification
    if (task.type === "screenshot") {
      // Check if screenshot was provided
      if (verificationData.screenshot) {
        try {
          // Upload to cloudinary
          const uploadResult = await cloudinary.uploader.upload(
            verificationData.screenshot,
            {
              folder: `tasks/${user._id}`,
              resource_type: "auto",
            }
          );

          console.log("Screenshot uploaded:", uploadResult.secure_url);

          // Store the image URL in the userTask
          userTask.screenshot = uploadResult.secure_url;
          verificationData.screenshotUrl = uploadResult.secure_url;

          // For screenshot tasks, we set this flag to true
          // but don't mark as verified immediately
          requiresManualVerification = true;

          // Set status to "pending verification" instead of completing immediately
          userTask.status = "pending_verification";
          userTask.submittedAt = new Date();
          userTask.verificationData = verificationData;

          await userTask.save();

          return res.json({
            success: true,
            message:
              "Screenshot uploaded successfully. Waiting for admin verification.",
            status: "pending_verification",
          });
        } catch (error) {
          console.error("Error uploading screenshot:", error);
          return res.status(400).json({
            success: false,
            message: "Failed to upload screenshot. Please try again.",
          });
        }
      } else {
        return res.status(400).json({
          success: false,
          message: "Screenshot is required for this task.",
        });
      }
    } else if (task.type === "youtube_watch" && verificationData.autoVerified) {
      // Handle YouTube auto-verification
      console.log("Processing auto-verified YouTube watch task");

      // Check if watched duration is sufficient
      const watchedDuration = verificationData.watchedDuration || 0;
      const requiredDuration = task.videoDuration || 0;

      console.log(
        `Watched: ${watchedDuration}s, Required: ${requiredDuration}s`
      );

      if (watchedDuration >= requiredDuration) {
        isVerified = true;
        console.log("Auto-verification successful - watched required duration");
      } else {
        return res.status(400).json({
          success: false,
          message: `You need to watch at least ${requiredDuration} seconds of the video.`,
        });
      }
    } else {
      // Handle other task types as before
      switch (task.type) {
        case "twitter_follow":
        case "twitter_share":
          isVerified =
            verificationData.tweetUrl &&
            verificationData.tweetUrl.includes("twitter.com");
          break;

        case "youtube_subscribe":
          isVerified =
            verificationData.channelUrl &&
            verificationData.channelUrl.includes("youtube.com");
          break;

        case "youtube_watch":
          isVerified =
            verificationData.videoUrl &&
            verificationData.videoUrl.includes("youtube.com/watch");
          break;

        case "telegram_join":
          isVerified =
            verificationData.username &&
            verificationData.username.startsWith("@");
          break;

        case "login":
        case "profile":
        case "custom":
          isVerified = true;
          break;

        default:
          isVerified = false;
      }
    }

    if (!isVerified && !requiresManualVerification) {
      return res.status(400).json({
        success: false,
        message: "Verification failed. Please check your submission.",
      });
    }

    // Only reach here for non-screenshot tasks
    // Update user task record for immediate verification
    userTask.completed = true;
    userTask.verified = true;
    userTask.completedAt = new Date();
    userTask.verificationData = verificationData;

    await userTask.save();

    // Update user's balance for immediate verification
    if (!user.walletBalance) {
      user.walletBalance = 0;
    }

    user.walletBalance = (
      parseFloat(user.walletBalance) + parseFloat(task.reward)
    ).toFixed(5);
    await user.save();

    res.json({
      success: true,
      message: "Task completed successfully",
      reward: task.reward,
      status: "completed",
    });
  } catch (error) {
    console.error("Error verifying task:", error);
    res.status(500).json({
      success: false,
      message: "Failed to verify task",
      error: error.message,
    });
  }
};